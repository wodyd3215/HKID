<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
<!-- namespace : 해당 mapper파일의 고유한 별칭 -->

<mapper namespace="productMapper">
	<resultMap type="Product" id="productResultSet">
		<!-- <result column="테이블 컬럼명" property="객체의 필드명"/> -->
		<result column="PRODUCT_NO" property="productNo" />
		<result column="MEMBER_NO" property="memberNo" />
		<result column="PRODUCT_NAME" property="productName" />
		<result column="CONTENT" property="content" />
		<result column="QUANTITY" property="quantity" />
		<result column="PRICE" property="price" />
		<result column="CATEGORY" property="category" />
		<result column="REGISTRATION_DATE" property="registrationDate" />
		<result column="TYPE" property="type" />
		<result column="STATUS" property="status" />
		<result column="FILE_NO" property="fileNo"/>
		<result column="CHANGE_NAME" property="changeName"/>
		<result column="RATE" property="rate"/>
		<result column="REVIEW_COUNT" property="reviewCount"/>
	</resultMap>
	
	<resultMap type="Review" id="reviewResultSet">
		<!-- <result column="테이블 컬럼명" property="객체의 필드명"/> -->
		<result column="REVIEW_NO" property="reviewNo" />
		<result column="PRODUCT_NO" property="productNo" />
		<result column="MEMBER_NO" property="memberNo" />
		<result column="REVIEW_CONTENT" property="reviewContent" />
		<result column="REVIEW_RATE" property="reviewRate" />
		<result column="REVIEW_DATE" property="reviewDate" />
		<result column="NICKNAME" property="nickname" />
		<result column="PRODUCT_NAME" property="productName" />
	</resultMap>
	<!-- 
		* SELECT문 전송 시
		<select id="각 sql문의 식별자" [parameterType="전달받을 자바타입"] resultMap="결과객체" | resultType="결과타입">
								    ↪없으면 생략해도 된다               ↪ mapper 에서  
	 -->
	 
	 <!-- 상품 목록 모두 가져오기 -->
	 <select id="selectListTotal" resultType="_int">
	 	SELECT COUNT(*)
	 	  FROM PRODUCT
	 	 WHERE TYPE = '1'
	 	   AND STATUS = 'Y'
	 </select>
	  
	<!-- 상품 목록 (전체) 조회 -->
	<select id="selectList" resultMap="productResultSet">
		SELECT p.PRODUCT_NO,
		       p.MEMBER_NO,
		       p.PRODUCT_NAME,
		       p.CONTENT,
		       p.QUANTITY,
		       p.PRICE,
		       p.CATEGORY,
		       t.FILE_NO,
		       t.CHANGE_NAME,
		       COALESCE(r.RATE, 0) AS RATE,
		       COALESCE(r.REVIEW_COUNT, 0) AS REVIEW_COUNT
		  FROM PRODUCT p
		  JOIN TOTAL_ATTACHMENT t ON p.PRODUCT_NO = t.PRODUCT_NO
		  LEFT JOIN (
		       	SELECT ROUND(AVG(REVIEW_RATE)) AS RATE, 
		       		   COUNT(*) AS REVIEW_COUNT,
		               PRODUCT_NO
		          FROM REVIEW
		         GROUP BY PRODUCT_NO
		  			) r ON p.PRODUCT_NO = r.PRODUCT_NO
		 WHERE STATUS = 'Y'
		   AND TYPE = 1
		 ORDER BY p.PRODUCT_NO DESC
	</select>
	
	<!-- 카테고리별 삼품 목록 총 갯수 -->
	<select id="selectProductCategoryListCount" resultType="_int">
		SELECT COUNT(*)
			FROM PRODUCT
		WHERE TYPE = '1'
		  AND STATUS = 'Y'
		<if test="category != '전체'">
        	AND CATEGORY = #{category}
    	</if>
	</select>
	
	<!--  카테고리별 상품 목록 리스트  -->
	<select id="selectProductCategoryList" resultType="Product">
		SELECT p.PRODUCT_NO,
		       p.MEMBER_NO,
		       p.PRODUCT_NAME,
		       p.CONTENT,
		       p.QUANTITY,
		       p.PRICE,
		       p.CATEGORY,
		       t.FILE_NO,
		       t.CHANGE_NAME,
		       COALESCE(r.RATE, 0) AS RATE,
		       COALESCE(r.REVIEW_COUNT, 0) AS REVIEW_COUNT
		  FROM PRODUCT p
		  LEFT JOIN TOTAL_ATTACHMENT t ON p.PRODUCT_NO = t.PRODUCT_NO
		  LEFT JOIN (
		       	SELECT ROUND(AVG(REVIEW_RATE)) AS RATE, 
		       		   COUNT(*) AS REVIEW_COUNT,
		               PRODUCT_NO
		          FROM REVIEW
		         GROUP BY PRODUCT_NO
		  			) r ON p.PRODUCT_NO = r.PRODUCT_NO
		 WHERE TYPE = '1' 
		   AND STATUS = 'Y'
	  	<if test="category != '전체'">
        	AND CATEGORY = #{category}
    	</if>
    	 ORDER BY p.PRODUCT_NO DESC
	</select>
	
	<!-- 상품 상세 페이지 
	<select id="selectProduct" resultType="Product">
		SELECT p.PRODUCT_NO,
           	   p.PRODUCT_NAME productName,
           	   p.CONTENT content,
           	   p.CATEGORY category,
           	   p.QUANTITY quantity,
           	   p.PRICE price,
           	   COALESCE(r.rate, 0) AS rate
      FROM PRODUCT p
      LEFT JOIN (
           SELECT AVG(REVIEW_RATE) rate, PRODUCT_NO
             FROM REVIEW
            GROUP BY PRODUCT_NO
      ) r ON p.PRODUCT_NO = r.PRODUCT_NO
     WHERE p.PRODUCT_NO = #{pno}
	</select>
	-->
	
	<!-- 상품 왼쪽 사이드바 -->
	<select id="choseNav" resultType="Product">
		SELECT p.PRODUCT_NO,
			   p.PRODUCT_NAME productName,
			   p.CONTENT content,
			   p.QUANTITY quantity,
			   p.PRICE price,
			   r.rate
		  FROM PRODUCT p 
		  JOIN (
		  	SELECT AVG(REVIEW_RATE) rate, PRODUCT_NO
		  		FROM REVIEW
		  		GROUP BY PRODUCT_NO
		  ) r ON p.PRODUCT_NO = r.PRODUCT_NO
		 WHERE CATEGORY = #{selectedValue}
		 ORDER BY p.PRODUCT_NO DESC
	</select>
	
	<select id="Rbtn" resultType="Product">
		SELECT p.PRODUCT_NO,
			   p.PRODUCT_NAME productName,
			   p.CONTENT content,
			   p.QUANTITY quantity,
			   p.PRICE price,
			   p.TYPE type,
			   r.rate
		  FROM PRODUCT p 
		  JOIN (
		  	SELECT AVG(REVIEW_RATE) rate, PRODUCT_NO
		  		FROM REVIEW
		  		GROUP BY PRODUCT_NO
		  ) r ON p.PRODUCT_NO = r.PRODUCT_NO
		 WHERE CATEGORY = #{selectedValue}
		 AND TYPE = #{rbtn}
		 ORDER BY p.PRODUCT_NO DESC
	</select>
		
 	<insert id="insertProduct">
 		INSERT INTO PRODUCT (
 								PRODUCT_NO,
 								MEMBER_NO,
 								PRODUCT_NAME,
 								CONTENT,
 								QUANTITY,
 								PRICE,
 								CATEGORY
 							)
 					 VALUES (
 					 			SEQ_PNO.NEXTVAL,
 					 			#{memberNo},
 					 			#{productName},
 					 			#{content},
 					 			#{quantity},
 					 			#{price},
 					 			#{category}				 			
 					        )
 	</insert>
	
	<insert id="insertAttachment">
		INSERT INTO TOTAL_ATTACHMENT (
										FILE_NO,
										CHANGE_NAME,
										PRODUCT_NO
									 )
							  VALUES (
							  			SEQ_FNO.NEXTVAL,
							  			#{files},
							  			SEQ_PNO.CURRVAL
							  		 )					
	</insert>
	
	<select id="searchList" resultMap="productResultSet">
		SELECT p.PRODUCT_NO productNo,
			   p.PRODUCT_NAME productName,
			   p.CATEGORY category,
			   p.PRICE price,
			   p.TYPE type
		  FROM PRODUCT p
		  JOIN (
		  	SELECT AVG(REVIEW_RATE) rate, PRODUCT_NO
		  		FROM REVIEW
		  		GROUP BY PRODUCT_NO
		  ) r ON p.PRODUCT_NO = r.PRODUCT_NO
		  WHERE p.TYPE = '1'
		  <choose>
		  	<when test="searchCategory == '식품'">
		  		AND CATEGORY = '식품'
		  	</when>
		  	<when test="searchCategory == '의류'">
		  		AND CATEGORY = '의류'
		  	</when>
		  	<when test="searchCategory == '기구'">
		  		AND CATEGORY = '기구'
		  	</when>
		  </choose>
		  LIKE '%' || #{keyword} || '%'
		  ORDER BY PRODUCT_NO DESC
	</select>
	
	<select id="selectEditProduct" resultMap="productResultSet">
		SELECT p.PRODUCT_NO,
		       p.MEMBER_NO,
		       p.PRODUCT_NAME,
		       p.CONTENT,
		       p.QUANTITY,
		       p.PRICE,
		       p.CATEGORY,
		       t.FILE_NO,
		       t.CHANGE_NAME,
		       COALESCE(r.RATE, 0) AS RATE,
		       COALESCE(r.REVIEW_COUNT, 0) AS REVIEW_COUNT
		  FROM PRODUCT p
		  JOIN TOTAL_ATTACHMENT t ON p.PRODUCT_NO = t.PRODUCT_NO
		  LEFT JOIN (
		       	SELECT ROUND(AVG(REVIEW_RATE)) AS RATE, 
		       		   COUNT(*) AS REVIEW_COUNT,
		               PRODUCT_NO
		          FROM REVIEW
		         GROUP BY PRODUCT_NO
		  			) r ON p.PRODUCT_NO = r.PRODUCT_NO
		 WHERE p.PRODUCT_NO = #{productNo}
	</select>
	
	<update id="deactivateProduct">
		UPDATE PRODUCT
		   SET STATUS = 'N' 
		 WHERE PRODUCT_NO = #{productNo}
	</update>
	
		
	<update id="updateAttachment">
		UPDATE TOTAL_ATTACHMENT
		   SET CHANGE_NAME = #{files}
		 WHERE PRODUCT_NO = #{productNo}
	</update>
	
	<update id="updateProduct">
		UPDATE PRODUCT
		   SET PRODUCT_NAME = #{productName},
			   CONTENT = #{content},
			   QUANTITY = #{quantity},
			   PRICE = #{price},
			   CATEGORY = #{category}
		 WHERE PRODUCT_NO = #{productNo}
			  
	</update>
	
	<select id="reviewCount" resultType="_int">
		SELECT COUNT(*)
		  FROM REVIEW
		 WHERE PRODUCT_NO = #{productNo}
	</select>
	
	<select id="selectReviewList" resultMap="reviewResultSet">
		SELECT REVIEW_NO,
			   PRODUCT_NAME,
			   NICKNAME,
			   REVIEW_CONTENT,
			   REVIEW_RATE,
			   TO_CHAR(REVIEW_DATE, 'YYYY-MM-DD') AS REVIEW_DATE
		  FROM REVIEW
		  JOIN MEMBER USING (MEMBER_NO)
		  JOIN PRODUCT USING (PRODUCT_NO)
		 WHERE PRODUCT_NO = #{productNo}
		 ORDER BY REVIEW_NO DESC 
	</select>
 </mapper>